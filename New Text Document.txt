import 'dart:async';
import 'dart:io';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:snake_game/snake.dart';
import 'package:snake_game/widgets.dart';

class Board extends StatefulWidget {
  @override
  State<Board> createState() => _BoardState();
}

class _BoardState extends State<Board> {
  List snakeposition;
  String movedirection;
  Timer t1, t2, t3, t4;
  Random randomfeed = Random();
  int feedposition;

//some parameters
  int firstdigit;
  int topborder;
  int bottomborder;
  int leftborder;
  int rightborder;

  //determine the border of board matrix based on the snake position
  showborder() {
    int first = snakeposition[snakeposition.length - 1] % 10; //7
    int second = snakeposition[snakeposition.length - 1] - first; //40
    //determine borders of the grid view matrix
    topborder = first;
    bottomborder = first + 110;
    rightborder = (second) + 9; // 49
    leftborder = second; //40
  }

  @override
  void initState() {
    // TODO: implement initState
    super.initState();

    //initilize the game
    startGame();
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        backgroundColor: Theme.of(context).backgroundColor,
        appBar: AppBar(
          title: Text('Snake Game'),
        ),
        body: Column(
          children: [
            Expanded(
              child: GridView.builder(
                  padding: EdgeInsets.all(12),
                  physics: NeverScrollableScrollPhysics(),
                  itemCount: 120,
                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 10,
                    mainAxisSpacing: 2.0,
                    crossAxisSpacing: 2.0,
                    childAspectRatio: 1.0,
                  ),
                  itemBuilder: (context, index) {
                    if (snakeposition.contains(index)) {
                      return Snake(index: index);
                    } else if (index == feedposition) {
                      return Container(
                        color: Colors.red,
                        child: Center(
                          child: Text(
                            index.toString(),
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 20.0,
                            ),
                          ),
                        ),
                      );
                    } else
                      return Container(
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: Theme.of(context).backgroundColor,
                        ),
                        child: Center(
                          child: Text(
                            index.toString(),
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 20.0,
                            ),
                          ),
                        ),
                      );
                  }),
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                FloatingActionButton(
                  onPressed: () {
                    if (movedirection != 'left' && movedirection != 'right') {
                      movedirection = 'left';
                      moveleft();
                    }
                  },
                  child: Icon(Icons.arrow_left),
                ),
                FloatingActionButton(
                  onPressed: () {
                    if (movedirection != 'right' && movedirection != 'left') {
                      movedirection = 'right';
                      moveright();
                    }
                  },
                  child: Icon(Icons.arrow_right),
                ),
                FloatingActionButton(
                  onPressed: () {
                    if (movedirection != 'up' && movedirection != 'down') {
                      movedirection = 'up';
                      movetop();
                    }
                  },
                  child: Icon(Icons.arrow_upward),
                ),
                FloatingActionButton(
                  onPressed: () {
                    if (movedirection != 'down' && movedirection != 'up') {
                      movedirection = 'down';
                      movebottom();
                    }
                  },
                  child: Icon(Icons.arrow_downward),
                ),
              ],
            ),
            FloatingActionButton(
              onPressed: (() => reloadDialog(context)),
              child: Icon(Icons.refresh_rounded),
            ),
          ],
        ),
      ),
    );
  }

//game initilization
  startGame() {
    setState(() {
      snakeposition = [0, 1, 2, 3, 4];
    });
    movedirection = 'right';
    moveright();
    feedposition = randomfeed.nextInt(119);
  }

//game over when snakes head crash with it's body instead of neeck it's impossible
  gameover() {
    var snakebody = snakeposition.getRange(0, snakeposition.length - 3);
    print(snakeposition);
    if (snakebody.contains(snakeposition.last)) {
      print("here crashed ${snakeposition}");
      reloadDialog(context);   
      t1.cancel();
      t2.cancel();
      t3.cancel();
      t4.cancel();
    }
  }

//feed position
//if snake head is equal to food position then re-initilize the position of food
//and add the food position onto the head on snake
  feed() {
    //reposition feed
    if (snakeposition.last == feedposition ||
        snakeposition.contains(feedposition)) {
      setState(() {
        snakeposition.insert(snakeposition.length, feedposition);
        feedposition = randomfeed.nextInt(119);
      });
    }
  }

//move right for each move remove first list item and add last++ into my list
// this will change list forward the snake to the right side
//the same process and logic for another move directions just change last item.
  moveright() {
    t1 = Timer.periodic(Duration(milliseconds: 500), (timer) {
      showborder();
      feed();
      gameover();
      if (movedirection == 'right') {
        if (snakeposition.last < rightborder) {
          setState(() {
            snakeposition.removeAt(0);
            snakeposition.insert(snakeposition.length, snakeposition.last + 1);
          });
        } else {
          setState(() {
            snakeposition.removeAt(0);
            snakeposition.insert(snakeposition.length, snakeposition.last - 9);
          });
        }
      } else {
        t1.cancel();
      }
    });
  }

  //move left
  moveleft() {
    t2 = Timer.periodic(Duration(milliseconds: 500), (timer) {
      showborder();
      feed();
      gameover();
      if (movedirection == 'left') {
        if (snakeposition.last > leftborder) {
          setState(() {
            snakeposition.removeAt(0);
            snakeposition.insert(snakeposition.length, snakeposition.last - 1);
          });
        } else {
          setState(() {
            snakeposition.removeAt(0);
            snakeposition.insert(snakeposition.length, snakeposition.last + 9);
          });
        }
      } else {
        t2.cancel();
      }
    });
  }

  //move top
  movebottom() {
    t3 = Timer.periodic(Duration(milliseconds: 500), (timer) {
      showborder();
      feed();
      gameover();

      if (movedirection == 'down') {
        if (snakeposition.last < bottomborder) {
          setState(() {
            snakeposition.removeAt(0);
            snakeposition.insert(snakeposition.length, snakeposition.last + 10);
          });
        } else {
          setState(() {
            snakeposition.removeAt(0);
            snakeposition.insert(
                snakeposition.length, snakeposition.last - 110);
          });
        }
      } else {
        t3.cancel();
      }
    });
  }

  //move top
  movetop() {
    Timer.periodic(Duration(milliseconds: 500), (timer) {
      showborder();
      feed();
      gameover();

      if (movedirection == 'up') {
        if (snakeposition.last > topborder) {
          setState(() {
            snakeposition.removeAt(0);
            snakeposition.insert(snakeposition.length, snakeposition.last - 10);
          });
        } else {
          setState(() {
            snakeposition.removeAt(0);
            snakeposition.insert(
                snakeposition.length, snakeposition.last + 110);
          });
        }
      } else {
        t4.cancel();
      }
    });
  }
}
